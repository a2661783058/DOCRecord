---------------------------------------------
1.官网地址：(从官网获取资源)
  1.logback:http://logback.qos.ch/manual/configuration.html
  2.Spring: http://docs.spring.io/spring/docs/
  3.mybatis:http://mybatis.github.io/mybatis-3/zh/index.jsp
                   http://www.mybatis.org/mybatis-3/zh/
----------------
2.mvn命令创建web骨架项目：
  mvn archetype:create-DgroupId=org.seckill -DartifactId=seckill -DatchetypeArtifactId=maven-archetype-webapp
----------------
3.idea创建maven项目：
    --1.使用提供好的示例：maven-archetype-webapp
    --2.修改web.xml版本为servlet3.1
        --servlet2.3中jsp的默认el表达式是不工作的,所以需要引入更高版本：
          G:\apache-tomcat-8.0.22\webapps\examples\WEB-INF\web.xml
          复制，修改servlet版本为3.1
    --3.补全缺失目录：
        project structure --mould--新建java、test:java/resource,并确定其功能
    --4.添加pom依赖：spring、log、web等
---------------
4.秒杀系统业务流程分析：
    商家-----添加/调整-----库存-----秒杀/预售-----用户
    商家-----发货/核账-----库存-----付款/退货-----用户
    --核心：库存的处理
        --用户秒杀----减库存+记录购买明细----完整事务----数据落地
        --购买行为：成功时间、有效期。付款发货信息
---------------
5.数据落地：
    --mysql:关系型数据库：事务机制仍是目前最可靠的落地方案。
    --nosql：非关系型数据库，例如redis等存储方案（追求高可用、性能、分布式），对事物的支持较差、
---------------
6.mysql实现秒杀难点分析：
    --竞争：n个用户同时秒杀一个活动
    --mysql：事务+行级锁
    --事务：
        --1.start transaction
        --2.update 库存数量  -------竞争关系在此处产生
        --3.insert 购买明细
        --4.commit
    --行级锁：
        update table set num=num-1 where id=10 and num>1
        --第十件商品同时被N个人秒杀，其余等待----如何高效处理竞争/即减库存的操作？？？？？？？？？？？？？？？
 --------------
 7.具体实现：秒杀功能
    --秒杀借口暴露：禁止浏览器插件自动请求
    --执行秒杀
    --秒杀相关查询
 -------------
 8，代码开发阶段
    --DAo设计编码：包含表设计
    --service设计
    --web设计
 -------------
 9.具体设计：
    --代码自动生成设置
 -------------
 10.mybatis：对象关系映射
    --sql可以写在注解/xml
    --Mapper自动实现Dao接口/API编程方式实现Dao接口（可以不写ResultMap映射）
    --mybatis+spring=
        --更少编码、只写接口，不写实现
        --更少配置、别名
        --足够灵活、
-------------
 11.-单项目多平台使用时，
    --1.可将具体的连接数据库信息配置在tomcat中：（JndiObjectFactoryBean多数据源配置+tomcat配置连库信息）
 12.-一般而言，配置在项目中即可。
 --------------------------------
13.spring管理service：
    spring-ioc功能理解：对象工厂+依赖管理==一致性访问接口
    业务对象依赖图：
    service--dao--SqlSessionFactory--DataSource
14.ioc使用原因：---
-0-------------------------------
15：声明式事务：
    --1.ProxyFactoryBean+XML  早期使用方式(2.0)
    --2.tx:advice+aop         一次配置永久生效
    --3.注解@Transational     注解控制，建议使用此种方式---
16.事务方法嵌套：
    传播行为--默认为propagation_required
17.Spring只有抛出运行时异常（RuntimeException）时才会回滚
18.小心不当的try catch，防止不正常时被commit
--------------------------------
   /**
     * 使用注解控制事务方法的有点：
     * 1.开发团队达成一致约定，明确标注事务方法的编程风格
     * 2.保证事务方法的执行时间尽可能短，不要穿插其他网络操作（HTTP协议、cache、redis等请求或者剥离到事务之外）
     * 3.不是所有的方法都需要事务，如只有一条修改操作，只读操作不需要事务控制
     */
--------------------------------
web开始：
    --1.前端交互设计
        --前端页面流程：列表--详情--login--展示--写入cookies
        --详情页流程逻辑：
            --1.获取标准系统时间（服务器时间）-- 时间判断，开始时间结束时间
                --结束：秒杀结束
                --未开始：倒计时---秒杀地址--执行秒杀
                --已开始：---------秒杀地址--执行秒杀
    --2.Resultful：一个优雅的url表述方式/资源状态或者资源状态的转移
        Resultful规范：
            --get   查询操作，可重复执行
            --post  添加、修改操作
            --put   修改操作，一般与post不区分
            --delete删除操作
        url设计：
        /模块/资源/{标示}/集合1(名词)...
        get /user/{uid}/friends  获取好友列表
        ---------
        本项目中的url设计：
        GET /seckill/list         秒杀列表
        GET /seckill/{id}/detail  详情页
        GET /seckill/time/now     系统时间
        POST/...                  暴露秒杀/执行秒杀等
    --3.spring-mvc：
        --1.理论：围绕Handler开发
            --流程：
                用户
                --DispatcherServlet--所有请求都交付于此servlet容器
                --DefaultAnnotationHandlerMapping-- 注解url映射
                --DefaultAnnotationHandlerAdapter-- 并进行适配开发的controller
                --ModelAndView     --将请求结果交付于DispatcherServlet
                --InternalResourceViewResolver --model/list.jsp
            --http请求地址映射原理：
                --http请求--servlet容器（tomcat/jetty）{
                    1.spring-mvc的注解映射管系
                    2.handler的处理方法
                }
            --注解映射技巧：
                --spring-mvc支持：
                    --1.@RequestMapping注解
                    --2.支持标准的url
                    --3.Ant风格url(即包含？(匹配一个字符)，*（匹配任意字符），**（匹任意路径），等字符)
                    --4.带{XXX}占位符的url；
                    如：
                        user/*/creation        user/aaa/creation
                        user/**/creation       user/aaa/bbb/creation
                        user/{userId}          user/123
                        user/{userId}/{phone}  user/123/12121212121
            --请求细节处理：
                --1.参数绑定
                --2.请求方式限制
                --3.请求转发/冲定向
                --4.数据模型赋值
                --5.返回json数据
                --6.cookie访问
            --1.数据Model
            --2.页面view
    --4.bootstrap+jquery
        --框架地址：www.runoob.com/bootstrap/bootstrap-environment-setup.html
